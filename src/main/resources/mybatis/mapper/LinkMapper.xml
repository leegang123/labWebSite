<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="scnu.able.myapp.dao.LinkMapper">

    <!-- 페이징 기능 처리를 위해서는 전체 리스트의 개수를 알아야 하므로 전체 리스트를 LIMIT 기능 없이 리턴해주는 함수 -->
    <select id="linkListNoLimit" resultType="scnu.able.myapp.vo.link.Link">
        select * from link
    </select>

    <!-- 실제로 List<Link>를 가져오는 메서드 -->
    <select id="linkList" resultType="scnu.able.myapp.vo.link.Link">
        select * from link order by linkIndate desc LIMIT #{startNum}, 10;
    </select>

    <!-- Link 객체를 실제로 db에 저장 -->
    <insert id="linkWrite" parameterType="scnu.able.myapp.vo.link.Link">
        insert into link(linkTitle, linkContent, linkWriter, linkFile) VALUES (#{linkTitle}, #{linkContent}, #{linkWriter}, #{linkFile})
    </insert>

    <!-- linkIdx를 얻어와서 link객체를 db로부터 꺼냄 -->
    <select id="getLinkByLinkIdx" resultType="scnu.able.myapp.vo.link.Link">
        select * from link where linkIdx = #{linkIdx}
    </select>

    <!-- Link 객체를 하나 받아와서 Link 객체를 특정할 수 있는 LinkIdx를 이용해 db에 저장된 Link 객체를 업데이트 해준다. -->
    <update id="linkUpdate" parameterType="scnu.able.myapp.vo.link.Link">
        update link set linkTitle = #{linkTitle}, linkContent = #{linkContent} where linkIdx = #{linkIdx}
    </update>

    <!-- Link 객체를 하나 받아와서 삭제해주는 메서드 -->
    <delete id="linkDelete" parameterType="scnu.able.myapp.vo.link.Link">
        delete from link where linkIdx = #{linkIdx}
    </delete>

    <!-- Link 객체 관련 메서들( 밑에부터는 LinkRepl(자유게시판 댓글 관련) 메서드들)) -->

    <!-- foreign key 역할인 linkIdx를 받아와서 그에 해당하는 LinkRepl을 가져와주는 메서드 -->
    <select id="linkReplList" resultType="scnu.able.myapp.vo.link.LinkRepl">
        select * from linkrepl where linkIdx = #{linkIdx}
    </select>

    <insert id="linkReplWrite" parameterType="scnu.able.myapp.vo.link.LinkRepl">
        insert into linkrepl(linkIdx, linkReplContent, linkReplWriter) VALUES (#{linkIdx}, #{linkReplContent}, #{linkReplWriter})
    </insert>

</mapper>